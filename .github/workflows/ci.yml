name: Continuous Integration

on:
  push:
    branches: [main]
    paths-ignore: ['docs/**', '.vscode/**', '**/cd.yml', 'kubernetes/**']

  pull_request:
    branches: [main]
    paths-ignore: ['docs/**', '.vscode/**', '**/cd.yml', 'kubernetes/**']

  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io/drifterapps/holefeeder

jobs:

  set-version:
    name: Set version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.majorMinorPatch }}
      assembly-version: ${{ steps.gitversion.outputs.semVer }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Disable workflow commands
        run: |
          echo "::stop-commands::`echo -n ${{ github.token }} | sha256sum | head -c 64`"

      - name: Ensure .NET Installed
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.10
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.10
        with:
          useConfigFile: true
          configFilePath: GitVersion.yml

      - name: Display GitVersion outputs
        run: |
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"

      - name: Enable workflow commands
        run: |
          echo "::`echo -n ${{ github.token }} | sha256sum | head -c 64`::"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: set-version
    env:
      VERSION: ${{ needs.set-version.outputs.version }}
      ASSEMBLY_VERSION: ${{ needs.set-version.outputs.assembly-version }}

    steps:

    - uses: actions/checkout@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Build Holefeeder.Api container
      uses: docker/build-push-action@v2
      with:
        load: true
        context: .
        file: ./src/Api/Holefeeder.Api/Dockerfile
        target: build
        build-args: BUILD_VERSION=${{ env.VERSION }}
        push: false
        tags: holefeeder/holefeeder-api:${{ env.VERSION }}
        cache-from: |
          type=gha,scope=api-build
        cache-to: |
          type=gha,scope=api-build,mode=max

    - name: Build Holefeeder.Web container
      uses: docker/build-push-action@v2
      with:
        load: true
        context: .
        file: ./src/Web/Holefeeder.Web/Dockerfile
        target: build
        build-args: BUILD_VERSION=${{ env.VERSION }}
        push: false
        tags: holefeeder/holefeeder-web:${{ env.VERSION }}
        cache-from: |
          type=gha,scope=ui-build
        cache-to: |
          type=gha,scope=ui-build,mode=max

  tests:
    name: Tests
    runs-on: ubuntu-latest
    needs: [set-version, build]
    env:
      VERSION: ${{ needs.set-version.outputs.version }}
      ASSEMBLY_VERSION: ${{ needs.set-version.outputs.assembly-version }}

    steps:

    - uses: actions/checkout@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Api unit tests
      if: ${{ success() }}
      run: docker-compose -f docker-compose-tests.yaml -f docker-compose-tests.override.yaml run api-unit-tests

    - name: Api functional tests
      if: ${{ success() }}
      run: docker-compose -f docker-compose-tests.yaml -f docker-compose-tests.override.yaml run api-functional-tests

    - name: Tests cleanup
      run: |
        docker-compose -f docker-compose-tests.yaml -f docker-compose-tests.override.yaml down
        docker-compose -f docker-compose-tests.yaml -f docker-compose-tests.override.yaml rm --force --all

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Unit Test Results
        path: |
          ./tests-results/**/*.xml

  event_file:
    name: "Event File"
    runs-on: ubuntu-latest
    steps:
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: Event File
        path: ${{ github.event_path }}

  package:
    name: Package
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && success() }}
    runs-on: ubuntu-latest
    needs: [set-version, tests]
    env:
      VERSION: ${{ needs.set-version.outputs.version }}
      ASSEMBLY_VERSION: ${{ needs.set-version.outputs.assembly-version }}

    steps:

    - uses: actions/checkout@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to GHCR
      uses: docker/login-action@v1
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Holefeeder.Api container
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./src/Api/Holefeeder.Api/Dockerfile
        target: final
        build-args: BUILD_VERSION=${{ env.VERSION }}
        push: true
        tags: ${{ env.DOCKER_REGISTRY }}/holefeeder-api:${{ env.VERSION }}
        cache-from: |
          type=gha,scope=api-build
          type=gha,scope=api-final
        cache-to: |
          type=gha,scope=api-final,mode=max

    - name: Build Holefeeder.Web container
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./src/Web/Holefeeder.Web/Dockerfile
        target: final
        build-args: BUILD_VERSION=${{ env.VERSION }}
        push: true
        tags: ${{ env.DOCKER_REGISTRY }}/holefeeder-web:${{ env.VERSION }}
        cache-from: |
          type=gha,scope=ui-build
          type=gha,scope=ui-final
        cache-to: |
          type=gha,scope=ui-final,mode=max

    - name: Tag version
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}          
        script: |
          try {
            await github.git.deleteRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "tags/${{ env.VERSION }}"
            })
          } catch (e) {
            console.log("The ${{ env.VERSION }} tag doesn't exist yet: " + e)
          }
          await github.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: "refs/tags/${{ env.VERSION }}",
            sha: context.sha
          })