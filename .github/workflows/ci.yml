name: continuous_integration

on:
  pull_request:
    branches:
    - main
    - master

    paths-ignore:
    - 'proxy/**'
    - 'docs/**'

env:
  DOCKER_REGISTRY: ghcr.io/drifterapps/holefeeder

jobs:
  set-version:
    name: set version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.majorMinorPatch }}
      assembly-version: ${{ steps.gitversion.outputs.semVer }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: disable workflow commands
        run: |
          echo "::stop-commands::`echo -n ${{ github.token }} | sha256sum | head -c 64`"

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.10
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.10
        with:
          useConfigFile: true
          configFilePath: GitVersion.yml

      - name: Display GitVersion outputs
        run: |
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"

      - name: enable workflow commands
        run: |
          echo "::`echo -n ${{ github.token }} | sha256sum | head -c 64`::"

  build:
    name: build
    runs-on: ubuntu-latest
    needs: set-version
    env:
      VERSION: ${{ needs.set-version.outputs.version }}
      ASSEMBLY_VERSION: ${{ needs.set-version.outputs.assembly-version }}

    steps:

    - uses: actions/checkout@v2

    - name: docker login
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.DOCKER_REGISTRY }} -u DrifterApps --password-stdin

    - uses: yokawasa/action-setup-kube-tools@v0.8.0
      with:
        kubectl: '1.22.2'
        kustomize: '4.4.0'
        skaffold: '1.32.0'
    
    # - name: Build
    #   run: |
    #     skaffold build -p cicd --default-repo ${{ env.DOCKER_REGISTRY }}

    - name: build Web.Gateway container
      run: |
        docker build -f ./src/ApiGateways/Web.Gateway/Dockerfile --build-arg BUILD_VERSION=${{ env.VERSION }} -t ${{ env.DOCKER_REGISTRY }}/holefeeder-gateway-web:${{ env.VERSION }} .

    - name: build Budgeting.API container
      run: |
        docker build -f ./src/Services/Budgeting/Budgeting.API/Dockerfile --build-arg BUILD_VERSION=${{ env.VERSION }} -t ${{ env.DOCKER_REGISTRY }}/holefeeder-budgeting-api:${{ env.VERSION }} .

    - name: build ObjectStore.API container
      run: |
        docker build -f ./src/Services/ObjectStore/ObjectStore.API/Dockerfile --build-arg BUILD_VERSION=${{ env.VERSION }} -t ${{ env.DOCKER_REGISTRY }}/holefeeder-object-store-api:${{ env.VERSION }} .

    - name: build Holefeeder.Web container
      run: |
        docker build -f ./src/Web/Holefeeder.Web/Dockerfile --build-arg BUILD_VERSION=${{ env.VERSION }} -t ${{ env.DOCKER_REGISTRY }}/holefeeder-web:${{ env.VERSION }} .

  tests:
    name: tests
    runs-on: ubuntu-latest
    needs:
    - set-version
    - build
    env:
      VERSION: ${{ needs.set-version.outputs.version }}

    steps:

    - uses: actions/checkout@v2

    - name: Budgetin.API unit tests
      if: ${{ success() }}
      run: |
        docker build -f ./src/Services/Budgeting/Budgeting.API/Dockerfile --build-arg BUILD_VERSION=${{ env.VERSION }} --target unitests -t ${{ env.DOCKER_REGISTRY }}/holefeeder-budgeting-api-unittests:${{ env.VERSION }} .
        docker create -ti --name testcontainer ${{ env.DOCKER_REGISTRY }}/holefeeder-budgeting-api-unittests:${{ env.VERSION }}
        docker cp testcontainer:/src/WebApplication1.UnitTests/TestResults/ $(Build.ArtifactStagingDirectory)/testresults 
        docker rm -fv testcontainer

    # - name: budgeting api functional tests
    #   if: ${{ success() }}
    #   run: docker-compose -f docker-compose-tests.yml -f docker-compose-tests.override.yml run budgeting-api-functional-test

    # - name: object-store api unit tests
    #   if: ${{ success() }}
    #   run: docker-compose -f docker-compose-tests.yml -f docker-compose-tests.override.yml run object-store-api-unit-test

    # - name: object-store api functional tests
    #   if: ${{ success() }}
    #   run: docker-compose -f docker-compose-tests.yml -f docker-compose-tests.override.yml run object-store-api-functional-test

    # - name: Publish Unit Test Results
    #   uses: EnricoMi/publish-unit-test-result-action@v1.6
    #   if: ${{ success() }}
    #   with:
    #     check_name: unit-test-results
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     files: tests-results/*.junit.xml

    # - name: setup .NET core # Required to execute ReportGenerator
    #   uses: actions/setup-dotnet@v1
    #   if: ${{ always() }}
    #   with:
    #     dotnet-version: 5.0.101

    # - name: report generator
    #   uses: danielpalme/ReportGenerator-GitHub-Action@4.8.3
    #   if: ${{ always() }}
    #   with:
    #     reports: 'tests-results/*/coverage.cobertura.xml'
    #     targetdir: 'coveragereport'
    #     sourcedirs: 'src/'
    #     reporttypes: 'HtmlInline;Cobertura'
    #     tag: '${{ github.run_number }}_${{ github.run_id }}'

    # - name: upload coverage report artifacts
    #   uses: actions/upload-artifact@v2
    #   if: ${{ always() }}
    #   with:
    #     name: coverage-report
    #     path: coveragereport

  #   - name: push containers
  #     run: docker-compose push

  #   - name: upload deployable files
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: deployables
  #       path: |
  #         docker-compose.yml
  #         docker-compose.prod.yml
  #         mongo/mongod.conf
  #         mongo/initdb.d/create-app-user.sh

  # staging:
  #   name: deploy to staging
  #   runs-on: ubuntu-latest
  #   needs:
  #   - set-version
  #   - build
  #   env:
  #     VERSION: ${{ needs.set-version.outputs.version }}
  #     ENVIRONMENT: Staging
  #     ENVIRONMENT_PREFIX: -staging
  #     HOLEFEEDER_EXTERNAL_DNS_NAME_OR_IP: holefeeder-staging.drifterapps.com
  #   environment:
  #     name: staging

  #   steps:
  #   - uses: actions/checkout@v2

  #   - name: download deployables artifacts
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: deployables
  #       path: ./artifacts/.

  #   - name: create environment file
  #     run: |
  #       printf "VERSION=${{ env.VERSION }}
  #       DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
  #       ENVIRONMENT=${{ env.ENVIRONMENT }}
  #       ENVIRONMENT_PREFIX=${{ env.ENVIRONMENT_PREFIX }}
  #       HOLEFEEDER_EXTERNAL_DNS_NAME_OR_IP=${{ env.HOLEFEEDER_EXTERNAL_DNS_NAME_OR_IP }}
  #       MONGO_REPLICA_SET_NAME=${{ secrets.MONGO_REPLICA_SET_NAME }}
  #       MONGO_CONNECTION_STRING=mongodb://${{ secrets.MONGODB_HOLEFEEDERAPI_USER }}:${{ secrets.MONGODB_HOLEFEEDERAPI_PASSWORD }}@nosql-data/?authSource=${{ secrets.MONGO_DATABASE_NAME }}
  #       MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGODB_ROOT_USER }}
  #       MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGODB_ROOT_PASSWORD }}
  #       MONGO_INITDB_USERNAME=${{ secrets.MONGODB_HOLEFEEDERAPI_USER }}
  #       MONGO_INITDB_PASSWORD=${{ secrets.MONGODB_HOLEFEEDERAPI_PASSWORD }}
  #       MONGO_INITDB_DATABASE=${{ secrets.MONGO_DATABASE_NAME }}
  #       MONGO_DATABASE_VOLUME=./mongo
  #       SEQ_ApiKey=${{ secrets.SEQ_APIKEY }}
  #       " > .env
  #     working-directory: ./artifacts

  #   - name: copy file
  #     uses: appleboy/scp-action@master
  #     with:
  #       host: ${{ secrets.PROD_WEB_SERVER }}
  #       username: ${{ secrets.PROD_WEB_SERVER_USER }}
  #       port: ${{ secrets.PROD_WEB_SERVER_PORT }}
  #       key: ${{ secrets.SSH_PRIVATE_KEY }}
  #       source: "artifacts/docker-compose.yml,artifacts/docker-compose.prod.yml,artifacts/.env,artifacts/mongo/mongod.conf,artifacts/mongo/initdb.d/create-app-user.sh"
  #       target: holefeeder-staging
  #       strip_components: 1
   
  #   - name: starting containers
  #     uses: appleboy/ssh-action@master
  #     with:
  #       host: ${{ secrets.PROD_WEB_SERVER }}
  #       username: ${{ secrets.PROD_WEB_SERVER_USER }}
  #       port: ${{ secrets.PROD_WEB_SERVER_PORT }}
  #       key: ${{ secrets.SSH_PRIVATE_KEY }}
  #       script_stop: true
  #       script: |
  #         cd ~/holefeeder-staging
  #         echo github registry login
  #         echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u DrifterApps --password-stdin
  #         echo pull containers
  #         docker-compose pull
  #         echo start containers
  #         docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

  # deploy:
  #   name: deploy to production
  #   runs-on: ubuntu-latest
  #   needs:
  #   - set-version
  #   - staging
  #   env:
  #     VERSION: ${{ needs.set-version.outputs.version }}
  #     ENVIRONMENT: Production
  #     HOLEFEEDER_EXTERNAL_DNS_NAME_OR_IP: holefeeder.drifterapps.com
  #   environment:
  #     name: production

  #   steps:
  #   - uses: actions/checkout@v2


  #   - name: download deployables artifacts
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: deployables
  #       path: ./artifacts/.

  #   - name: create environment file
  #     run: |
  #       printf "VERSION=${{ env.VERSION }}
  #       DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
  #       ENVIRONMENT=${{ env.ENVIRONMENT }}
  #       ENVIRONMENT_PREFIX=${{ env.ENVIRONMENT_PREFIX }}
  #       HOLEFEEDER_EXTERNAL_DNS_NAME_OR_IP=${{ env.HOLEFEEDER_EXTERNAL_DNS_NAME_OR_IP }}
  #       MONGO_REPLICA_SET_NAME=${{ secrets.MONGO_REPLICA_SET_NAME }}
  #       MONGO_CONNECTION_STRING=mongodb://${{ secrets.MONGODB_HOLEFEEDERAPI_USER }}:${{ secrets.MONGODB_HOLEFEEDERAPI_PASSWORD }}@nosql-data/?authSource=${{ secrets.MONGO_DATABASE_NAME }}
  #       MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGODB_ROOT_USER }}
  #       MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGODB_ROOT_PASSWORD }}
  #       MONGO_INITDB_USERNAME=${{ secrets.MONGODB_HOLEFEEDERAPI_USER }}
  #       MONGO_INITDB_PASSWORD=${{ secrets.MONGODB_HOLEFEEDERAPI_PASSWORD }}
  #       MONGO_INITDB_DATABASE=${{ secrets.MONGO_DATABASE_NAME }}
  #       MONGO_DATABASE_VOLUME=./mongo
  #       SEQ_ApiKey=${{ secrets.SEQ_APIKEY }}
  #       " > .env
  #     working-directory: ./artifacts

  #   - name: copy file
  #     uses: appleboy/scp-action@master
  #     with:
  #       host: ${{ secrets.PROD_WEB_SERVER }}
  #       username: ${{ secrets.PROD_WEB_SERVER_USER }}
  #       port: ${{ secrets.PROD_WEB_SERVER_PORT }}
  #       key: ${{ secrets.SSH_PRIVATE_KEY }}
  #       source: "artifacts/docker-compose.yml,artifacts/docker-compose.prod.yml,artifacts/.env,artifacts/mongo/mongod.conf,artifacts/mongo/initdb.d/create-app-user.sh"
  #       target: holefeeder
  #       strip_components: 1
   
  #   - name: starting containers
  #     uses: appleboy/ssh-action@master
  #     with:
  #       host: ${{ secrets.PROD_WEB_SERVER }}
  #       username: ${{ secrets.PROD_WEB_SERVER_USER }}
  #       port: ${{ secrets.PROD_WEB_SERVER_PORT }}
  #       key: ${{ secrets.SSH_PRIVATE_KEY }}
  #       script_stop: true
  #       script: |
  #         cd ~/holefeeder
  #         echo github registry login
  #         echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u DrifterApps --password-stdin
  #         echo pull containers
  #         docker-compose pull
  #         echo start containers
  #         docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
  #         echo stop staging
  #         cd ~/holefeeder-staging
  #         docker-compose down
  #         echo cleanup previous images
  #         docker image prune -f
